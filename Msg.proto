syntax = "proto2";

// Messages for Client & Server communication
message request_msg_t {
    required uint32 type = 1;
    required uint32 client_id = 2;
    required uint64 request_id = 3;
    optional txn_msg_t transaction = 4;
}

message response_msg_t {
    required uint32 type = 1;
    required uint64 request_id = 2;
    required bool succeed = 3;
    optional float balance = 4;
    optional uint32 leader_id = 5;
}

// Messages for Blockchain

message txn_msg_t {
    required uint32 sender_id = 1;
    required uint32 recver_id = 2;
    required float amount = 3;
    optional bool bal_txn_flag = 4;
}

message block_msg_t {
    required uint32 term = 1;
    required string phash = 2;
    required string nonce = 3;
    required txn_msg_t txn = 4;
    required int32 index = 5;
}

message bc_msg_t {
    required int32 committed_index = 1;
	repeated block_msg_t blocks = 3;
}

// Message for Raft
message replica_msg_t {
    required uint32 type = 1;
    required uint32 receiver_id = 2;
    optional request_vote_rpc_msg_t request_vote_rpc_msg = 3;
    optional request_vote_reply_msg_t request_vote_reply_msg = 4;
    optional append_entry_rpc_msg_t append_entry_rpc_msg = 5;
    optional append_entry_reply_msg_t append_entry_reply_msg = 6;
}

message request_vote_rpc_msg_t {
    required uint32 candidate_id = 1;
    required uint32 term = 2;
    required uint32 last_log_term = 3;
    required int32 last_log_index = 4;
}

message request_vote_reply_msg_t {
    required uint32 term = 1;
    required bool vote_granted = 2;
}

message append_entry_rpc_msg_t {
    required uint32 term = 1;
    required uint32 leader_id = 2;
    required uint32 prev_log_term = 3;
    required int32 prev_log_index = 4;
    required int32 commit_index = 5;
    repeated block_msg_t entries = 6;
}

message append_entry_reply_msg_t {
    required uint32 term = 1;
    required uint32 sender_id = 2;
    required bool success = 3;
}