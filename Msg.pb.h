// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Msg_2eproto;
class bc_msg_t;
class bc_msg_tDefaultTypeInternal;
extern bc_msg_tDefaultTypeInternal _bc_msg_t_default_instance_;
class block_msg_t;
class block_msg_tDefaultTypeInternal;
extern block_msg_tDefaultTypeInternal _block_msg_t_default_instance_;
class txn_msg_t;
class txn_msg_tDefaultTypeInternal;
extern txn_msg_tDefaultTypeInternal _txn_msg_t_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::bc_msg_t* Arena::CreateMaybeMessage<::bc_msg_t>(Arena*);
template<> ::block_msg_t* Arena::CreateMaybeMessage<::block_msg_t>(Arena*);
template<> ::txn_msg_t* Arena::CreateMaybeMessage<::txn_msg_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class txn_msg_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txn_msg_t) */ {
 public:
  txn_msg_t();
  virtual ~txn_msg_t();

  txn_msg_t(const txn_msg_t& from);
  txn_msg_t(txn_msg_t&& from) noexcept
    : txn_msg_t() {
    *this = ::std::move(from);
  }

  inline txn_msg_t& operator=(const txn_msg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline txn_msg_t& operator=(txn_msg_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const txn_msg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const txn_msg_t* internal_default_instance() {
    return reinterpret_cast<const txn_msg_t*>(
               &_txn_msg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(txn_msg_t& a, txn_msg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(txn_msg_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline txn_msg_t* New() const final {
    return CreateMaybeMessage<txn_msg_t>(nullptr);
  }

  txn_msg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<txn_msg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const txn_msg_t& from);
  void MergeFrom(const txn_msg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(txn_msg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txn_msg_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIdFieldNumber = 1,
    kRecverIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // required uint32 sender_id = 1;
  bool has_sender_id() const;
  private:
  bool _internal_has_sender_id() const;
  public:
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 recver_id = 2;
  bool has_recver_id() const;
  private:
  bool _internal_has_recver_id() const;
  public:
  void clear_recver_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 recver_id() const;
  void set_recver_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recver_id() const;
  void _internal_set_recver_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  float amount() const;
  void set_amount(float value);
  private:
  float _internal_amount() const;
  void _internal_set_amount(float value);
  public:

  // @@protoc_insertion_point(class_scope:txn_msg_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recver_id_;
  float amount_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class block_msg_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:block_msg_t) */ {
 public:
  block_msg_t();
  virtual ~block_msg_t();

  block_msg_t(const block_msg_t& from);
  block_msg_t(block_msg_t&& from) noexcept
    : block_msg_t() {
    *this = ::std::move(from);
  }

  inline block_msg_t& operator=(const block_msg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_msg_t& operator=(block_msg_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const block_msg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const block_msg_t* internal_default_instance() {
    return reinterpret_cast<const block_msg_t*>(
               &_block_msg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(block_msg_t& a, block_msg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(block_msg_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_msg_t* New() const final {
    return CreateMaybeMessage<block_msg_t>(nullptr);
  }

  block_msg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_msg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const block_msg_t& from);
  void MergeFrom(const block_msg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_msg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "block_msg_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhashFieldNumber = 2,
    kNonceFieldNumber = 3,
    kTxnFieldNumber = 4,
    kTermFieldNumber = 1,
    kIndexFieldNumber = 5,
  };
  // required string phash = 2;
  bool has_phash() const;
  private:
  bool _internal_has_phash() const;
  public:
  void clear_phash();
  const std::string& phash() const;
  void set_phash(const std::string& value);
  void set_phash(std::string&& value);
  void set_phash(const char* value);
  void set_phash(const char* value, size_t size);
  std::string* mutable_phash();
  std::string* release_phash();
  void set_allocated_phash(std::string* phash);
  private:
  const std::string& _internal_phash() const;
  void _internal_set_phash(const std::string& value);
  std::string* _internal_mutable_phash();
  public:

  // required string nonce = 3;
  bool has_nonce() const;
  private:
  bool _internal_has_nonce() const;
  public:
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // required .txn_msg_t txn = 4;
  bool has_txn() const;
  private:
  bool _internal_has_txn() const;
  public:
  void clear_txn();
  const ::txn_msg_t& txn() const;
  ::txn_msg_t* release_txn();
  ::txn_msg_t* mutable_txn();
  void set_allocated_txn(::txn_msg_t* txn);
  private:
  const ::txn_msg_t& _internal_txn() const;
  ::txn_msg_t* _internal_mutable_txn();
  public:

  // required uint32 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 index = 5;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:block_msg_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::txn_msg_t* txn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class bc_msg_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bc_msg_t) */ {
 public:
  bc_msg_t();
  virtual ~bc_msg_t();

  bc_msg_t(const bc_msg_t& from);
  bc_msg_t(bc_msg_t&& from) noexcept
    : bc_msg_t() {
    *this = ::std::move(from);
  }

  inline bc_msg_t& operator=(const bc_msg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline bc_msg_t& operator=(bc_msg_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bc_msg_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bc_msg_t* internal_default_instance() {
    return reinterpret_cast<const bc_msg_t*>(
               &_bc_msg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(bc_msg_t& a, bc_msg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(bc_msg_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bc_msg_t* New() const final {
    return CreateMaybeMessage<bc_msg_t>(nullptr);
  }

  bc_msg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bc_msg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bc_msg_t& from);
  void MergeFrom(const bc_msg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bc_msg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bc_msg_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 3,
    kCommittedIndexFieldNumber = 1,
  };
  // repeated .block_msg_t blocks = 3;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::block_msg_t* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_msg_t >*
      mutable_blocks();
  private:
  const ::block_msg_t& _internal_blocks(int index) const;
  ::block_msg_t* _internal_add_blocks();
  public:
  const ::block_msg_t& blocks(int index) const;
  ::block_msg_t* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_msg_t >&
      blocks() const;

  // required uint32 committed_index = 1;
  bool has_committed_index() const;
  private:
  bool _internal_has_committed_index() const;
  public:
  void clear_committed_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 committed_index() const;
  void set_committed_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_committed_index() const;
  void _internal_set_committed_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bc_msg_t)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_msg_t > blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 committed_index_;
  friend struct ::TableStruct_Msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// txn_msg_t

// required uint32 sender_id = 1;
inline bool txn_msg_t::_internal_has_sender_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool txn_msg_t::has_sender_id() const {
  return _internal_has_sender_id();
}
inline void txn_msg_t::clear_sender_id() {
  sender_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 txn_msg_t::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 txn_msg_t::sender_id() const {
  // @@protoc_insertion_point(field_get:txn_msg_t.sender_id)
  return _internal_sender_id();
}
inline void txn_msg_t::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sender_id_ = value;
}
inline void txn_msg_t::set_sender_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:txn_msg_t.sender_id)
}

// required uint32 recver_id = 2;
inline bool txn_msg_t::_internal_has_recver_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool txn_msg_t::has_recver_id() const {
  return _internal_has_recver_id();
}
inline void txn_msg_t::clear_recver_id() {
  recver_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 txn_msg_t::_internal_recver_id() const {
  return recver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 txn_msg_t::recver_id() const {
  // @@protoc_insertion_point(field_get:txn_msg_t.recver_id)
  return _internal_recver_id();
}
inline void txn_msg_t::_internal_set_recver_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  recver_id_ = value;
}
inline void txn_msg_t::set_recver_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recver_id(value);
  // @@protoc_insertion_point(field_set:txn_msg_t.recver_id)
}

// required float amount = 3;
inline bool txn_msg_t::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool txn_msg_t::has_amount() const {
  return _internal_has_amount();
}
inline void txn_msg_t::clear_amount() {
  amount_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float txn_msg_t::_internal_amount() const {
  return amount_;
}
inline float txn_msg_t::amount() const {
  // @@protoc_insertion_point(field_get:txn_msg_t.amount)
  return _internal_amount();
}
inline void txn_msg_t::_internal_set_amount(float value) {
  _has_bits_[0] |= 0x00000004u;
  amount_ = value;
}
inline void txn_msg_t::set_amount(float value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:txn_msg_t.amount)
}

// -------------------------------------------------------------------

// block_msg_t

// required uint32 term = 1;
inline bool block_msg_t::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool block_msg_t::has_term() const {
  return _internal_has_term();
}
inline void block_msg_t::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 block_msg_t::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 block_msg_t::term() const {
  // @@protoc_insertion_point(field_get:block_msg_t.term)
  return _internal_term();
}
inline void block_msg_t::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  term_ = value;
}
inline void block_msg_t::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:block_msg_t.term)
}

// required string phash = 2;
inline bool block_msg_t::_internal_has_phash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool block_msg_t::has_phash() const {
  return _internal_has_phash();
}
inline void block_msg_t::clear_phash() {
  phash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& block_msg_t::phash() const {
  // @@protoc_insertion_point(field_get:block_msg_t.phash)
  return _internal_phash();
}
inline void block_msg_t::set_phash(const std::string& value) {
  _internal_set_phash(value);
  // @@protoc_insertion_point(field_set:block_msg_t.phash)
}
inline std::string* block_msg_t::mutable_phash() {
  // @@protoc_insertion_point(field_mutable:block_msg_t.phash)
  return _internal_mutable_phash();
}
inline const std::string& block_msg_t::_internal_phash() const {
  return phash_.GetNoArena();
}
inline void block_msg_t::_internal_set_phash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  phash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void block_msg_t::set_phash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  phash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:block_msg_t.phash)
}
inline void block_msg_t::set_phash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  phash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:block_msg_t.phash)
}
inline void block_msg_t::set_phash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  phash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:block_msg_t.phash)
}
inline std::string* block_msg_t::_internal_mutable_phash() {
  _has_bits_[0] |= 0x00000001u;
  return phash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* block_msg_t::release_phash() {
  // @@protoc_insertion_point(field_release:block_msg_t.phash)
  if (!_internal_has_phash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return phash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void block_msg_t::set_allocated_phash(std::string* phash) {
  if (phash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  phash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phash);
  // @@protoc_insertion_point(field_set_allocated:block_msg_t.phash)
}

// required string nonce = 3;
inline bool block_msg_t::_internal_has_nonce() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool block_msg_t::has_nonce() const {
  return _internal_has_nonce();
}
inline void block_msg_t::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& block_msg_t::nonce() const {
  // @@protoc_insertion_point(field_get:block_msg_t.nonce)
  return _internal_nonce();
}
inline void block_msg_t::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:block_msg_t.nonce)
}
inline std::string* block_msg_t::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:block_msg_t.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& block_msg_t::_internal_nonce() const {
  return nonce_.GetNoArena();
}
inline void block_msg_t::_internal_set_nonce(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void block_msg_t::set_nonce(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nonce_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:block_msg_t.nonce)
}
inline void block_msg_t::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:block_msg_t.nonce)
}
inline void block_msg_t::set_nonce(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:block_msg_t.nonce)
}
inline std::string* block_msg_t::_internal_mutable_nonce() {
  _has_bits_[0] |= 0x00000002u;
  return nonce_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* block_msg_t::release_nonce() {
  // @@protoc_insertion_point(field_release:block_msg_t.nonce)
  if (!_internal_has_nonce()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nonce_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void block_msg_t::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nonce_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:block_msg_t.nonce)
}

// required .txn_msg_t txn = 4;
inline bool block_msg_t::_internal_has_txn() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || txn_ != nullptr);
  return value;
}
inline bool block_msg_t::has_txn() const {
  return _internal_has_txn();
}
inline void block_msg_t::clear_txn() {
  if (txn_ != nullptr) txn_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::txn_msg_t& block_msg_t::_internal_txn() const {
  const ::txn_msg_t* p = txn_;
  return p != nullptr ? *p : *reinterpret_cast<const ::txn_msg_t*>(
      &::_txn_msg_t_default_instance_);
}
inline const ::txn_msg_t& block_msg_t::txn() const {
  // @@protoc_insertion_point(field_get:block_msg_t.txn)
  return _internal_txn();
}
inline ::txn_msg_t* block_msg_t::release_txn() {
  // @@protoc_insertion_point(field_release:block_msg_t.txn)
  _has_bits_[0] &= ~0x00000004u;
  ::txn_msg_t* temp = txn_;
  txn_ = nullptr;
  return temp;
}
inline ::txn_msg_t* block_msg_t::_internal_mutable_txn() {
  _has_bits_[0] |= 0x00000004u;
  if (txn_ == nullptr) {
    auto* p = CreateMaybeMessage<::txn_msg_t>(GetArenaNoVirtual());
    txn_ = p;
  }
  return txn_;
}
inline ::txn_msg_t* block_msg_t::mutable_txn() {
  // @@protoc_insertion_point(field_mutable:block_msg_t.txn)
  return _internal_mutable_txn();
}
inline void block_msg_t::set_allocated_txn(::txn_msg_t* txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete txn_;
  }
  if (txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  txn_ = txn;
  // @@protoc_insertion_point(field_set_allocated:block_msg_t.txn)
}

// required uint32 index = 5;
inline bool block_msg_t::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool block_msg_t::has_index() const {
  return _internal_has_index();
}
inline void block_msg_t::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 block_msg_t::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 block_msg_t::index() const {
  // @@protoc_insertion_point(field_get:block_msg_t.index)
  return _internal_index();
}
inline void block_msg_t::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  index_ = value;
}
inline void block_msg_t::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:block_msg_t.index)
}

// -------------------------------------------------------------------

// bc_msg_t

// required uint32 committed_index = 1;
inline bool bc_msg_t::_internal_has_committed_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool bc_msg_t::has_committed_index() const {
  return _internal_has_committed_index();
}
inline void bc_msg_t::clear_committed_index() {
  committed_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bc_msg_t::_internal_committed_index() const {
  return committed_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bc_msg_t::committed_index() const {
  // @@protoc_insertion_point(field_get:bc_msg_t.committed_index)
  return _internal_committed_index();
}
inline void bc_msg_t::_internal_set_committed_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  committed_index_ = value;
}
inline void bc_msg_t::set_committed_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_committed_index(value);
  // @@protoc_insertion_point(field_set:bc_msg_t.committed_index)
}

// repeated .block_msg_t blocks = 3;
inline int bc_msg_t::_internal_blocks_size() const {
  return blocks_.size();
}
inline int bc_msg_t::blocks_size() const {
  return _internal_blocks_size();
}
inline void bc_msg_t::clear_blocks() {
  blocks_.Clear();
}
inline ::block_msg_t* bc_msg_t::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:bc_msg_t.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_msg_t >*
bc_msg_t::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:bc_msg_t.blocks)
  return &blocks_;
}
inline const ::block_msg_t& bc_msg_t::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::block_msg_t& bc_msg_t::blocks(int index) const {
  // @@protoc_insertion_point(field_get:bc_msg_t.blocks)
  return _internal_blocks(index);
}
inline ::block_msg_t* bc_msg_t::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::block_msg_t* bc_msg_t::add_blocks() {
  // @@protoc_insertion_point(field_add:bc_msg_t.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::block_msg_t >&
bc_msg_t::blocks() const {
  // @@protoc_insertion_point(field_list:bc_msg_t.blocks)
  return blocks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Msg_2eproto
